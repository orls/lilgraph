// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/orls/lilgraph/internal/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : TopLevelContent	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelContent : empty	<< ast.NewGraph(nil) >>`,
		Id:         "TopLevelContent",
		NTType:     1,
		Index:      1,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewGraph(nil)
		},
	},
	ProdTabEntry{
		String: `TopLevelContent : TopLevelDeclList	<<  >>`,
		Id:         "TopLevelContent",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDeclList : TopLevelStmt	<< ast.NewGraph(X[0]) >>`,
		Id:         "TopLevelDeclList",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewGraph(X[0])
		},
	},
	ProdTabEntry{
		String: `TopLevelDeclList : TopLevelDeclList TopLevelStmt	<< ast.AppendGraphItem(X[0], X[1]) >>`,
		Id:         "TopLevelDeclList",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendGraphItem(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `NodeDecl : id "[" AttrItems "]"	<< ast.NewNode(X[0], "", X[2]) >>`,
		Id:         "NodeDecl",
		NTType:     3,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[0], "", X[2])
		},
	},
	ProdTabEntry{
		String: `NodeDecl : id "[" id AttrItems "]"	<< ast.NewNode(X[0], X[2], X[3]) >>`,
		Id:         "NodeDecl",
		NTType:     3,
		Index:      6,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[0], X[2], X[3])
		},
	},
	ProdTabEntry{
		String: `NodeDecl : id "[" id ";" AttrItems "]"	<< ast.NewNode(X[0], X[2], X[4]) >>`,
		Id:         "NodeDecl",
		NTType:     3,
		Index:      7,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[0], X[2], X[4])
		},
	},
	ProdTabEntry{
		String: `NodeDecl : id "[" id "]"	<< ast.NewNode(X[0], X[2], nil) >>`,
		Id:         "NodeDecl",
		NTType:     3,
		Index:      8,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[0], X[2], nil)
		},
	},
	ProdTabEntry{
		String: `NodeDecl : id	<< ast.NewNode(X[0], "", nil) >>`,
		Id:         "NodeDecl",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[0], "", nil)
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edgearrow id	<< ast.NewEdgeStep(X[0], X[1], "", nil) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[1], "", nil)
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open edge_attr_close id	<< ast.NewEdgeStep(X[0], X[2], "", nil) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[2], "", nil)
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open AttrItems edge_attr_close id	<< ast.NewEdgeStep(X[0], X[3], "", X[1]) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      12,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[3], "", X[1])
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open id edge_attr_close id	<< ast.NewEdgeStep(X[0], X[3], X[1], nil) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      13,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[3], X[1], nil)
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open id ";" edge_attr_close id	<< ast.NewEdgeStep(X[0], X[4], X[1], nil) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      14,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[4], X[1], nil)
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open id AttrItems edge_attr_close id	<< ast.NewEdgeStep(X[0], X[4], X[1], X[2]) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      15,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[4], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `EdgeRHS : edge_attr_open id ";" AttrItems edge_attr_close id	<< ast.NewEdgeStep(X[0], X[5], X[1], X[3]) >>`,
		Id:         "EdgeRHS",
		NTType:     4,
		Index:      16,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeStep(X[0], X[5], X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `EdgeDecl : id EdgeRHS	<< ast.NewEdgeChain(X[0],X[1]) >>`,
		Id:         "EdgeDecl",
		NTType:     5,
		Index:      17,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEdgeChain(X[0],X[1])
		},
	},
	ProdTabEntry{
		String: `EdgeDecl : EdgeDecl EdgeRHS	<< ast.ExtendEdgeChain(X[0],X[1]) >>`,
		Id:         "EdgeDecl",
		NTType:     5,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExtendEdgeChain(X[0],X[1])
		},
	},
	ProdTabEntry{
		String: `TopLevelStmt : EdgeDecl	<<  >>`,
		Id:         "TopLevelStmt",
		NTType:     6,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelStmt : EdgeDecl ";"	<<  >>`,
		Id:         "TopLevelStmt",
		NTType:     6,
		Index:      20,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelStmt : NodeDecl	<<  >>`,
		Id:         "TopLevelStmt",
		NTType:     6,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelStmt : NodeDecl ";"	<<  >>`,
		Id:         "TopLevelStmt",
		NTType:     6,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AttrItems : Attr	<< X[0], nil >>`,
		Id:         "AttrItems",
		NTType:     7,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AttrItems : AttrItems Attr	<< ast.MergeAttrs(X[0], X[1]) >>`,
		Id:         "AttrItems",
		NTType:     7,
		Index:      24,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.MergeAttrs(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Attr : id "=" AttrVal	<< ast.NewAttrs(X[0], X[2]) >>`,
		Id:         "Attr",
		NTType:     8,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAttrs(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Attr : id "=" AttrVal ","	<< ast.NewAttrs(X[0], X[2]) >>`,
		Id:         "Attr",
		NTType:     8,
		Index:      26,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAttrs(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `AttrVal : id	<< X[0], nil >>`,
		Id:         "AttrVal",
		NTType:     9,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AttrVal : numeric_literal	<< X[0], nil >>`,
		Id:         "AttrVal",
		NTType:     9,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AttrVal : quoted_string	<< ast.Unquote(X[0]) >>`,
		Id:         "AttrVal",
		NTType:     9,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Unquote(X[0])
		},
	},
}
