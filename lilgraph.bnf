/*
    Lexical
    =======
*/

/*
    IDs
    ---
    An ID can be: [_a-zA-Z][_a-zA-Z0-9]*
*/

_ascii_letter
    : 'a' - 'z'
    | 'A' - 'Z'
    ;

_id_letter : _ascii_letter | '_' ;

_ascii_digit : '0' - '9' ;

_id : _id_letter { _id_letter | _ascii_digit } ;
id : _id;

/*
    Attributes
    ----------

    An attribute value can be:

    1) An ID
    2) A numeric literal (but, note that ALL attrs are emitted as strings)
    3) A quoted string.

    Following DOT, in quoted strings the only escaped character is double-quote
    ("). That is, in quoted strings, the dyad \" is converted to "; all other
    characters are left unchanged. In particular, \\ remains \\.

    But unlike DOT (iiuc), strings can span multiple lines without any special
    newline wrangling.
*/

_ascii_digits : _ascii_digit { _ascii_digit };
numeric_literal
    : [ '-' ] _ascii_digits [ '.' _ascii_digits ]
    | [ '-' ] '.' _ascii_digits
    ;

// An arbitrary ASCII character except null (0x00), double quote (0x22) and
// backslash (0x5C).
_ascii_char
    // skip null (0x00)
    : '\x01' - '\x21'
    // skip double quote (0x22)
    | '\x23' - '\x5B'
    // skip backslash (0x5C)
    | '\x5D' - '\x7F'
    ;

_unicode_char
    : _ascii_char
    | '\u0080' - '\uFFFC'
    // skip invalid code point (\uFFFD)
    | '\uFFFE' - '\U0010FFFF'
    ;

// TODO: copied this from DOT. Given what DOT claims re no other escapes, what's going on here?
// E.g. why does it need double-backslash specialness?
_escaped_char : '\\' ( _unicode_char | '"' | '\\' ) ;
_char         : _unicode_char | _escaped_char ;
quoted_string : '"' { _char } '"' ;

/*
    Comments & Whitespace
    ---------------------
*/

_line_comment
    : '/' '/' { . } '\n'
    | '#' { . } '\n'
    ;

_block_comment : '/' '*' { . | '*' } '*' '/' ;
!comment       : _line_comment | _block_comment ;
!whitespace : ' ' | '\t' | '\r' | '\n' ;

/*
    Edges
    -----
*/

edgearrow     : '-' { '-' } '>' ;
edge_attr_open     : '-' { '-' } '[' ;
edge_attr_close : ']' '-' { '-' } '>' ;

/*
    Syntax
    ======
*/

<< import "github.com/orls/lilgraph/internal/ast" >>

/*
Graph
    : TopLevelContent                                       << ast.NewGraph($0) >>
    ;
    */

TopLevelContent
    : empty                                                 << ast.NewGraph(nil) >>
    | TopLevelDeclList
    ;

TopLevelDeclList
    : TopLevelStmt                                          << ast.NewGraph($0) >>
    | TopLevelDeclList TopLevelStmt                         << ast.AppendGraphItem($0, $1) >>
    ;

NodeDecl
    : id "[" AttrItems "]"                                  << ast.NewNode($0, "", $2) >>
    | id "[" id AttrItems "]"                               << ast.NewNode($0, $2, $3) >>
    | id "[" id ";" AttrItems "]"                           << ast.NewNode($0, $2, $4) >>
    | id "[" id "]"                                         << ast.NewNode($0, $2, nil) >>
    | id "[" id ";" "]"                                     << ast.NewNode($0, $2, nil) >>
    | id "[" "]"                                            << ast.NewNode($0, "", nil) >>
    | id                                                    << ast.NewNode($0, "", nil) >>
    ;

EdgeRHS
    : edgearrow id                                          << ast.NewEdgeStep($0, $1, "", nil) >>
    | edge_attr_open edge_attr_close id                     << ast.NewEdgeStep($0, $2, "", nil) >>
    | edge_attr_open AttrItems edge_attr_close id           << ast.NewEdgeStep($0, $3, "", $1) >>
    | edge_attr_open id edge_attr_close id                  << ast.NewEdgeStep($0, $3, $1, nil) >>
    | edge_attr_open id ";" edge_attr_close id              << ast.NewEdgeStep($0, $4, $1, nil) >>
    | edge_attr_open id AttrItems edge_attr_close id        << ast.NewEdgeStep($0, $4, $1, $2) >>
    | edge_attr_open id ";" AttrItems edge_attr_close id    << ast.NewEdgeStep($0, $5, $1, $3) >>
    ;

EdgeDecl
    : id EdgeRHS                                            << ast.NewEdgeChain($0,$1) >>
    | EdgeDecl EdgeRHS                                      << ast.ExtendEdgeChain($0,$1) >>
    ;

TopLevelStmt
    : EdgeDecl
    | EdgeDecl ";"
    | NodeDecl
    | NodeDecl ";"
    ;

AttrItems
    : Attr                                                  << ast.NewAttrs($0) >>
    | AttrItems Attr                                        << ast.AddAttr($0, $1) >>
    ;

Attr
    : id "=" AttrVal                                        << ast.NewAttr($0, $2) >>
    | id "=" AttrVal ","                                    << ast.NewAttr($0, $2) >>
    ;

AttrVal
    : id                                                    << $0, nil >>
    | numeric_literal                                       << $0, nil >>
    | quoted_string                                         << ast.Unquote($0) >>
    ;
