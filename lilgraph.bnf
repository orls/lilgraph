/*
    Lexical
    =======
*/

/*
    IDs
    ---
    An ID can be: [_a-zA-Z][_a-zA-Z0-9]*
*/

_ascii_letter
    : 'a' - 'z'
    | 'A' - 'Z'
    ;

_id_letter : _ascii_letter | '_' ;

_ascii_digit : '0' - '9' ;

id : _id_letter { _id_letter | _ascii_digit } ;

/*
    Comments & Whitespace
    ---------------------
*/

_line_comment
    : '/' '/' { . } '\n'
    | '#' { . } '\n'
    ;

_block_comment : '/' '*' { . | '*' } '*' '/' ;
!comment       : _line_comment | _block_comment ;
!whitespace : ' ' | '\t' | '\r' | '\n' ;

/*
    Edges
    -----
*/

edgearrow     : '-' { '-' } '>' ;
edge_attr_open     : '-' { '-' } '[' ;
edge_attr_close : ']' '-' { '-' } '>' ;

/*
    Syntax
    ======
*/

<< import "github.com/orls/lilgraph/internal/ast" >>

/*
Graph
    : TopLevelContent                                       << ast.NewGraph($0) >>
    ;
    */

TopLevelContent
    : empty                                                 << ast.NewGraph(nil) >>
    | TopLevelDeclList
    ;

TopLevelDeclList
    : TopLevelStmt                                          << ast.NewGraph($0) >>
    | TopLevelDeclList TopLevelStmt                         << ast.AppendGraphItem($0, $1) >>
    ;

NodeDecl
    : id "[" AttrItems "]"                                  << ast.NewNode($0, "", $2) >>
    | id "[" id AttrItems "]"                               << ast.NewNode($0, $2, $3) >>
    | id "[" id ";" AttrItems "]"                           << ast.NewNode($0, $2, $4) >>
    | id "[" id "]"                                         << ast.NewNode($0, $2, nil) >>
    | id                                                    << ast.NewNode($0, "", nil) >>
    ;

EdgeRHS
    : edgearrow id                                          << ast.NewEdgeStep($0, $1, "", nil) >>
    | edge_attr_open edge_attr_close id                     << ast.NewEdgeStep($0, $2, "", nil) >>
    | edge_attr_open AttrItems edge_attr_close id           << ast.NewEdgeStep($0, $3, "", $1) >>
    | edge_attr_open id edge_attr_close id                  << ast.NewEdgeStep($0, $3, $1, nil) >>
    | edge_attr_open id ";" edge_attr_close id              << ast.NewEdgeStep($0, $4, $1, nil) >>
    | edge_attr_open id AttrItems edge_attr_close id        << ast.NewEdgeStep($0, $4, $1, $2) >>
    | edge_attr_open id ";" AttrItems edge_attr_close id    << ast.NewEdgeStep($0, $5, $1, $3) >>
    ;

EdgeDecl
    : id EdgeRHS                                            << ast.NewEdgeChain($0,$1) >>
    | EdgeDecl EdgeRHS                                      << ast.ExtendEdgeChain($0,$1) >>
    ;

TopLevelStmt
    : EdgeDecl
    | EdgeDecl ";"
    | NodeDecl
    | NodeDecl ";"
    ;

AttrItems
    : Attr                                                  << $0, nil >>
    | AttrItems Attr                                        << ast.MergeAttrs($0, $1) >>
    ;

Attr
    : id "=" AttrVal                                        << ast.NewAttrs($0, $2) >>
    | id "=" AttrVal ","                                    << ast.NewAttrs($0, $2) >>
    ;

/* TODO: support quoted strings, plain numbers etc for attrs. This is a short-term
hack while I get the grammar superstructure up and running */
AttrVal
	: id 													<< $0, nil >>
	;